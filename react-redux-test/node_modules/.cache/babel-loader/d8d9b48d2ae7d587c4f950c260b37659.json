{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const counterSlice = createSlice({\n  name: \"counter\",\n  initialState: {\n    value: 0\n  },\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  }\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = counterSlice.actions;\nexport default counterSlice.reducer;","map":{"version":3,"names":["createSlice","counterSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","reducer"],"sources":["/Users/nr/Desktop/디지털/과제/practice-pull-request-app/react-redux-test/src/counterSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const counterSlice = createSlice({\n    name: \"counter\",\n    initialState: {\n        value: 0,\n    },\n    reducers: {\n        increment: (state) => {\n            // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n            // doesn't actually mutate the state because it uses the Immer library,\n            // which detects changes to a \"draft state\" and produces a brand new\n            // immutable state based off those changes\n            state.value += 1;\n        },\n        decrement: (state) => {\n            state.value -= 1;\n        },\n        incrementByAmount: (state, action) => {\n            state.value += action.payload;\n        },\n    },\n});\n\n// Action creators are generated for each case reducer function\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\nexport default counterSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,YAAY,GAAGD,WAAW,CAAC;EACpCE,IAAI,EAAE,SAD8B;EAEpCC,YAAY,EAAE;IACVC,KAAK,EAAE;EADG,CAFsB;EAKpCC,QAAQ,EAAE;IACNC,SAAS,EAAGC,KAAD,IAAW;MAClB;MACA;MACA;MACA;MACAA,KAAK,CAACH,KAAN,IAAe,CAAf;IACH,CAPK;IAQNI,SAAS,EAAGD,KAAD,IAAW;MAClBA,KAAK,CAACH,KAAN,IAAe,CAAf;IACH,CAVK;IAWNK,iBAAiB,EAAE,CAACF,KAAD,EAAQG,MAAR,KAAmB;MAClCH,KAAK,CAACH,KAAN,IAAeM,MAAM,CAACC,OAAtB;IACH;EAbK;AAL0B,CAAD,CAAhC,C,CAsBP;;AACA,OAAO,MAAM;EAAEL,SAAF;EAAaE,SAAb;EAAwBC;AAAxB,IAA8CR,YAAY,CAACW,OAAjE;AAEP,eAAeX,YAAY,CAACY,OAA5B"},"metadata":{},"sourceType":"module"}